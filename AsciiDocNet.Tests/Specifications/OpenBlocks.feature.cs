// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AsciiDocNet.Tests.Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Open Blocks")]
    public partial class OpenBlocksFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OpenBlocks.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Open Blocks", "In order to group content in a generic container\r\nAs a writer\r\nI want to be able " +
                    "to wrap content in an open block", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Render an open block that contains a paragraph to HTML")]
        public virtual void RenderAnOpenBlockThatContainsAParagraphToHTML()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Render an open block that contains a paragraph to HTML", ((string[])(null)));
#line 7
  this.ScenarioSetup(scenarioInfo);
#line hidden
#line 8
  testRunner.Given("the AsciiDoc source", "--\r\nA paragraph in an open block.\r\n--", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
  testRunner.When("it is converted to html", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
  testRunner.Then("the result should match the HTML source", "<div class=\"openblock\">\r\n<div class=\"content\">\r\n<div class=\"paragraph\">\r\n<p>A par" +
                    "agraph in an open block.</p>\r\n</div>\r\n</div>\r\n</div>", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Render an open block that contains a list to HTML")]
        public virtual void RenderAnOpenBlockThatContainsAListToHTML()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Render an open block that contains a list to HTML", ((string[])(null)));
#line 40
  this.ScenarioSetup(scenarioInfo);
#line hidden
#line 41
  testRunner.Given("the AsciiDoc source", "--\r\n* one\r\n* two\r\n* three\r\n--", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
  testRunner.When("it is converted to html", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
  testRunner.Then("the result should match the HTML source", "<div class=\"openblock\">\r\n<div class=\"content\">\r\n<ul>\r\n<li><p>one</p></li>\r\n<li><p" +
                    ">two</p></li>\r\n<li><p>three</p></li>\r\n</ul>\r\n</div>\r\n</div>", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
